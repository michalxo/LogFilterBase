NGMON -> NGMON Logger latex!

RUN hadoop exmaple job and look for log statements

-- Qpid application instead of hadoop --

When translating hadoop-common project, file
hadoop-common/hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java
contains variables at the end of the file! Move to the first class


GOMATCH

2014-04-14 12:38:21,556 DEBUG org.ngmon.logger.logtranslator.ngmonLogging.SimpleLogger - {"Event":{"tags":[],"type":
"replacementLogOriginalLog","level":5000,"_":{"schema":"org.ngmon.logger.logtranslator.ngmonLogging.LogTranslatorNamespace",
"replacementLog":"LOG.processing_messages_from_datanodes_that_were(count).info()",

"originalLog":"LOG.info(\"Processing \"+count+\" messages from DataNodes \"+\"that were previously queued during standby state\")"}}}
--->
org.hadooop.XYZ.replacementLog##Processing <INT:count> messages from DataNodes that were previously queued during standby state.")


LOG.warn("!!! WARNING !!!"+"\n\tThe NameNode currently runs without persistent storage."+"\n\tAny changes to the file system meta-data may be lost."+"\n\tRecommended actions:"+"\n\t\t- shutdown and restart NameNode with configured \""+propertyName+"\" in hdfs-site.xml;"+"\n\t\t- use Backup Node as a persistent and up-to-date storage "+"of the file system meta-data.")
LOG.warning_n_tthe_namenode_currently_runs_n_n_n_in_n_of(propertyName).warn()
public AbstractNamespace warning_n_tthe_namenode_currently_runs_n_n_n_in_n_of(String propertyName)



variable declaration related rules:

x memberDeclaration
x   fieldDeclarator
x   localVariableDeclaration
?   constantDeclarator
?   constDeclaration




==== In original java source code file change following ====
-- modify imports --
  import org.apache.commons.logging.Log;            *   depend on logging framework
  import org.apache.commons.logging.LogFactory;     *   depend on logging framework
  import cz.muni.fi.logger.LoggerFactory;           +
  import cz.muni.fi.logger.LogGlobal;               +
  import org.apache.hadoop.hdfs.nfs.NfsNamespace;   +?  autogenerated derived from file location or package, limited to depth o 6 (5+1 total) - changeable?


-- modify class members --
? private static final LogGlobal LOG_GLOBAL;                        +   add this default handler to pass through LOG.isXEnabled() checkers
  Log LOG = LogFactory.getLog(AsyncDataService.class)               *   depend on logging framework
  NfsNamespace LOG = LoggerFactory.getLogger(NfsNamespace.class);   +   generated using actual namespace


  Log should be found by 'contains("log")' and type of import comparision.

-- translate log statements --
  if (LOG.isDebugEnabled()) {
        LOG.debug("Current active thread number: " + executor.getActiveCount()
            + " queue size:" + executor.getQueue().size()
            + " scheduled task number:" + executor.getTaskCount());
  }
   -->
  if (LOG_GLOBAL.isDebugEnabled()) {
        LOG.CURRENT_ACTIVE_THREAD_NUMBER_QUEUE_SIZE_SCHEDULED(executor.getActiveCount(),
                executor.getQueue().size(), executor.getTaskCount()).tag("org.apache.hadoop.hdfs.nfs").debug();
  }


  Limit line output to 80 characters if possible +/-10
  Maximum of X words in LOG.METHOD_CALL_NAME (by default 7) log_generation_max_length


=== logging systems usedd in hadoop ===
    SLF4J:
org.slf4j.Logger;
org.slf4j.LoggerFactory;

    Apache Commons Logging:
org.apache.commons.logging.impl.Log4JLogger;
org.apache.commons.logging.Log;
org.apache.commons.logging.LogFactory;


    Apache Log4j:
spi and non spi logger
org.apache.log4j.{,spi.}Logger;
org.apache.log4j.Level;
org.apache.log4j.LogManager;
+ other