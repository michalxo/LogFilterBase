variable declaration related rules:

x memberDeclaration
x   fieldDeclarator
x   localVariableDeclaration
?   constantDeclarator
?   constDeclaration




==== In original java source code file change following ====
-- modify imports --
  import org.apache.commons.logging.Log;            *   depend on logging framework
  import org.apache.commons.logging.LogFactory;     *   depend on logging framework
  import cz.muni.fi.logger.LoggerFactory;           +
  import cz.muni.fi.logger.LogGlobal;               +
  import org.apache.hadoop.hdfs.nfs.NfsNamespace;   +?  autogenerated derived from file location or package, limited to depth o 6 (5+1 total) - changeable?


-- modify class members --
? private static final LogGlobal LOG_GLOBAL;                        +   add this default handler to pass through LOG.isXEnabled() checkers
  Log LOG = LogFactory.getLog(AsyncDataService.class)               *   depend on logging framework
  NfsNamespace LOG = LoggerFactory.getLogger(NfsNamespace.class);   +   generated using actual namespace


  Log should be found by 'contains("log")' and type of import comparision.

-- translate log statements --
  if (LOG.isDebugEnabled()) {
        LOG.debug("Current active thread number: " + executor.getActiveCount()
            + " queue size:" + executor.getQueue().size()
            + " scheduled task number:" + executor.getTaskCount());
  }
   -->
  if (LOG_GLOBAL.isDebugEnabled()) {
        LOG.CURRENT_ACTIVE_THREAD_NUMBER_QUEUE_SIZE_SCHEDULED(executor.getActiveCount(),
                executor.getQueue().size(), executor.getTaskCount()).tag("org.apache.hadoop.hdfs.nfs").debug();
  }


  Limit line output to 80 characters if possible +/-10
  Maximum of X words in LOG.METHOD_CALL_NAME (by default 7) log_generation_max_length

==== Generate new files based ====
  XNamespace.java file:

  location:
   original: /home/mtoth/skola/dp/hadoop-common/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/AsyncDataService.java
   modified:          /home/mtoth/Desktop/ngmon/hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/NfsNamespace.java (or to to other location?)

   "package org.apache.hadoop.hdfs.nfs;

    import cz.muni.fi.annotation.Namespace;
    import cz.muni.fi.logger.AbstractNamespace;

    @Namespace
    public class NfsNamespace extends AbstractNamespace {

    	public AbstractNamespace MOUNT_NULLOP_CLIENT(String client) {
    		return log(client);
    	}

    	...
    }"

  Associate LogGlobal classes into NGMON project - pseudoClass to handle checker calls of isLEVELEnabled() for default all turned ON.
  Turn on/off - configurable via ngmon property {all,debug,trace,error,fatal,warn}_logs_enabled={true,false}.


=== logging systems usedd in hadoop ===
    SLF4J:
org.slf4j.Logger;
org.slf4j.LoggerFactory;

    Apache Commons Logging:
org.apache.commons.logging.impl.Log4JLogger;
org.apache.commons.logging.Log;
org.apache.commons.logging.LogFactory;


    Apache Log4j:
spi and non spi logger
org.apache.log4j.{,spi.}Logger;
org.apache.log4j.Level;
org.apache.log4j.LogManager;
+ other